@page "/placementTest/listening/{studentId}"
@inject HttpClient Http
@inject NavigationManager navigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@layout MainLayout

@if (questionId <= listeningQuestions.Length)
{
	<span class="title">Listening</span> 
	<button class="btn btn-primary mx-auto" @onclick="@PlayAudio" value="Play Audio">Play Audio</button>
		answer.QuestionId = questionId;
		<span class="timer">@(new DateTime(countDown.Ticks).ToString("mm:ss"))</span>
		<div class="paper m-xxl-4">
			@if(play)
			{
				<audio src="./records/@(questionId).mp3" controls autoplay hidden >
				</audio>
			}
			<EditForm Model="@answer" OnValidSubmit="@submit">
			@{
				answer.QuestionId = questionId;
			}
				<p class="fs-4">@questionId . @listeningQuestions[questionId -1].QuestionText</p>
				<div class="d-flex justify-content-evenly">
					<InputRadioGroup @bind-Value="answer.AnswerId">
					@foreach (var answer in listeningQuestions[questionId - 1].Answers)
					{
						@if (!String.IsNullOrEmpty(answer.AnswerText))
						{
							<InputRadio  class="btn-check" id="@answer.Id" Value="answer.Id"></InputRadio>
							<label class="btn btn-outline-primary" for="@answer.Id">@answer.AnswerText</label>
						}
					}
					</InputRadioGroup>
				</div>
			@{
				if (answer.AnswerId != 0) isDisabled = false;
				else isDisabled = true;
			}
				<input class="btn btn-primary d-block mx-auto my-4 w-50" disabled="@isDisabled" type="submit" value="Next"/>
				<input class="btn btn-danger d-block mx-auto my-4 w-15"  @onclick="@skip" value="Skip"/>
			</EditForm>			
	</div>
}else {
	navigationManager.NavigateTo($"/placementTest/grammer/{studentId}");
}
<style>

</style>

@code {
	public int questionId ;
	[Parameter]
	public string? studentId { get; set; }
	private Student student {get ; set; }
	protected bool isDisabled = true;
	private Question[]? grammerQuestions { get ; set; }
	private Question[]? listeningQuestions { get; set; }
	private StudentAnswerDto? answer { get; set; } = new StudentAnswerDto();
	private System.Threading.Timer? timer; // NOTE: THIS LINE OF CODE ADDED
	private TimeSpan countDown;
	private bool play;


	protected override async Task OnInitializedAsync()
	{
		play = false;
		answer.StudentId = Int16.Parse(studentId);
		listeningQuestions = await Http.GetFromJsonAsync<Question[]>($"/api/Question/getByQuestionType/2");
		student = await Http.GetFromJsonAsync<Student>($"/api/Student/{studentId}");
		questionId = student.CurrentQuestion;
		countDown = student.Timer;
		//timer
		timer = new System.Threading.Timer(async (object? stateInfo) =>
		{
			await sessionStorage.SetItemAsStringAsync("timer", countDown.ToString());
			countDown = countDown - TimeSpan.FromSeconds(1);
			answer.Timer = countDown;
			if(countDown == TimeSpan.Zero)
			{
				navigationManager.NavigateTo("/");
			}
			StateHasChanged(); // NOTE: MUST CALL StateHasChanged() BECAUSE THIS IS TRIGGERED BY A TIMER INSTEAD OF A USER EVENT
		}, new System.Threading.AutoResetEvent(false), 1000, 1000); // fire every 1000 milliseconds
	}
	private async Task submit()
	{
		await Http.PutAsJsonAsync<StudentAnswerDto>($"/api/student/submitAnswer", answer);
		questionId = questionId + 1;
		answer.AnswerId = 0;
	}
	private void check(){
		isDisabled = false;
	}
	private async Task skip(){
		questionId = questionId + 1;
	}
	private async Task PlayAudio()
	{
		play = true;
	}
}
