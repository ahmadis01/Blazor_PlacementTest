@page "/placementTest/learning-profile-survey/{studentId}"
@inject HttpClient Http
@inject NavigationManager navigationManager
@layout MainLayout

<span class="title">Learning Profile Servey</span>
<div class="d-flex justify-content-center flex-column mx-xxl-5">
	@{
		int i = 0; 
	}
	<EditForm Model="answerDto" OnValidSubmit="submit">
		@foreach (var item in questions)
		{
			if (!answerDto.Any(s => s.QuestionId == item.Id))
				answerDto.Add(new StudentProfileAnswers
				{
					AnswerId = 0,
					QuestionId = item.Id,
					AnswerText = string.Empty,
					QuestionType = item.QuestionType,
					StudentId = Int32.Parse(studentId)
				});
			<div class="m-3">
				<p class="fs-4">@item.QuestionText</p>
				@switch (item.QuestionType)
				{
					case QuestionType.Multiple_Choice:
						<div class="d-flex justify-content-evenly">
							<InputRadioGroup @bind-Value="answerDto[questions.IndexOf(item)].AnswerId">
								@foreach (var answer in item.Answers)
								{
									@if (!String.IsNullOrEmpty(answer.AnswerText))
									{
										<InputRadio class="btn-check" id="@answer.Id" Value="answer.Id"></InputRadio>
										<label class="btn btn-outline-primary" for="@answer.Id">@answer.AnswerText</label>
									}
								}
							</InputRadioGroup>
						</div>
						break;
					case QuestionType.TrueOrFalse:
						<div class="d-flex justify-content-evenly">
							<InputRadioGroup @bind-Value="answerDto[questions.IndexOf(item)].AnswerId">
								@foreach (var answer in item.Answers)
								{
									@if (!String.IsNullOrEmpty(answer.AnswerText))
									{
										<InputRadio class="btn-check" id="@answer.Id" Value="answer.Id"></InputRadio>
										<label class="btn btn-outline-primary" for="@answer.Id">@answer.AnswerText</label>
									}
								}
							</InputRadioGroup>
						</div>
						break;
					case QuestionType.Text:
						<input class="form-control" type="text" @bind-value="answerDto[questions.IndexOf(item)].AnswerText"/>
						break;
					case QuestionType.TextArea:
							<textarea  class="form-control" @bind="answerDto[questions.IndexOf(item)].AnswerText"></textarea>
							break;
					}
			</div>
				
			i++;
		}
	</EditForm>
	<div class="d-flex justify-content-center align-items-center m-2">
		<button type="submit" class="btn btn-primary w-25" @onclick="submit">Submit</button>
	</div>
</div>
@code {
	[Parameter]
	public string? studentId { get; set; }
	List<Question> questions { get; set; }
	private PersonalDataDto personalData = new PersonalDataDto();
	public List<StudentProfileAnswers>? answerDto { get; set; } = new List<StudentProfileAnswers>();
	protected override async Task OnInitializedAsync()
	{
		personalData = await Http.GetFromJsonAsync<PersonalDataDto>($"/api/student/GetStudentPersonalData/{studentId}");

		if(personalData.Age < 16)
			navigationManager.NavigateTo($"/placementTest/{studentId}");

		questions = await Http.GetFromJsonAsync<List<Question>>($"/api/Question/getByQuestionSection/{(int)QuestionSection.LEARNING_PROFILE_SURVEY}");
	}
	private async Task submit()
	{
		await Http.PutAsJsonAsync<List<StudentProfileAnswers>>($"/api/student/SubmitLearningProfileSurvey", answerDto);
		navigationManager.NavigateTo($"/placementTest/{studentId}");
	}
}
