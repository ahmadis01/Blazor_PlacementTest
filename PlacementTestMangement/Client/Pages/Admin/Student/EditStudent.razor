@page "/admin/student/{StudentId}"
@inject HttpClient Http
@inject NavigationManager navigationManager

<div class="container">	
	<div class="container">
		<div class="details">
			<h3>Details</h3>
			<div class="d-flex justify-content-between">
				<span class="m-2 p-1 bg-primary rounded-2 text-light">Student Id : @student.Id</span>
				<span class="m-2 p-1 bg-primary rounded-2 text-light">Student Name : @student.Name</span>
				<span class="m-2 p-1 bg-primary rounded-2 text-light">Student PhoneNumber : @student.PhoneNumber</span>
				<span class="m-2 p-1 bg-primary rounded-2 text-light">Student Age : @student.Age</span>
				<span class="m-2 p-1 bg-primary rounded-2 text-light">Student Address : @student.Address</span>
				<span class="m-2 p-1 bg-primary rounded-2 text-light">Student BirthDate : @student.BirthDate.Date</span>
				<span class="m-2 p-1 bg-primary rounded-2 text-light">Student School/work : @student.SchoolOrWork</span>
			</div>
		</div>
		<h3>Answers</h3>

		<div class="answers border border-light m-3 p-2" style="overflow-y:scroll;max-height:400px">
			<table class="table">
				<thead>
					<tr>
						<th scope="col">#</th>
						<th scope="col">Question</th>
						<th scope="col">Answer</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var item in answers)
					{
						<tr>
							<th scope="row">@(answers.IndexOf(item)+1)</th>
							<td>@item.Question</td>
							<td>@item.Answer</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
	<div class="form">
		<EditForm Model="@student" class="card p-4" id="form" OnValidSubmit="@Edit">
			<span class="mx-auto fw-bold fs-4">Edit Student</span>
			<label for="name" class="col-form-label">Student Name</label>
			<input class="form-control mb-3" id="name" @bind-value="student.Name"/>
			<label for="name" class="col-form-label">Timer</label>
			<input class="form-control mb-3" id="name" @bind-value="student.Timer"/>
			<label for="name" class="col-form-label">Current Question</label>
			<input class="form-control mb-3" id="name" @bind-value="student.CurrentQuestion"/>
			<label for="number" class="col-form-label">Student Number</label>
			<input class="form-control mb-3" id="number" @bind-value="student.PhoneNumber"/>
			<label for="number" class="col-form-label">PlacementTest Mark out of 5</label>
			<input class="form-control mb-3" id="number" @bind-value="student.PlacementTestMark" disabled/>
			<label for="number" class="col-form-label">Writing Mark out of 5</label>
			<input class="form-control mb-3" id="number" @bind-value="student.WritingMark"/>
			<label for="number" class="col-form-label">Speaking Mark out of 5</label>
			<input class="form-control mb-3" id="number" @bind-value="student.SpeakingMark"/>
			<label for="number" class="col-form-label">Total Score</label>
			<input class="form-control mb-3" id="number" value="@((double)((double)student.PlacementTestMark/10 + @student.WritingMark + @student.SpeakingMark))" disabled/>
			<label for="note" class="col-form-label">Notes</label>
			<input class="form-control mb-3" id="note" @bind-value="student.Note" />
			<label for="number" class="col-form-label">Level</label>
			<InputSelect class="form-control" @bind-Value="student.Level">
				@foreach (var level in levels)
				{
						<option value="@level.LevelName">@level.LevelName</option>
				}
			</InputSelect>
			<DataAnnotationsValidator />
			<ValidationSummary />	
			<button type="submit" class="btn btn-primary m-2">Edit</button>
		</EditForm>
	</div>
</div>

@code {
	[Parameter]
	public string? StudentId { get; set; }
	private Student? student = new Student();
	private List<Level> levels;
	List<GetStudentAnswersDto> answers;

	protected override async Task OnInitializedAsync()
	{
		student = await Http.GetFromJsonAsync<Student>($"/api/Student/{StudentId}");
		levels = await Http.GetFromJsonAsync<List<Level>>($"/api/Setting/level");
		answers = await Http.GetFromJsonAsync<List<GetStudentAnswersDto>>($"/api/student/GetStudentAnswers/{StudentId}");
		student.PlacementTestMark = student.PlacementTestMark / 10d;
	}
	async Task Edit()
	{
		var respond = await Http.PutAsJsonAsync<Student>("/api/Student/", student);
		navigationManager.NavigateTo("/admin/student");
	}
}
