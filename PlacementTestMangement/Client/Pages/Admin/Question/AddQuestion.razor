@page "/admin/question/add"
@using Microsoft.AspNetCore.Http
@using System.Net.Http.Headers
@inject HttpClient Http
@inject NavigationManager navigationManager

<div class="container">	
	<div class="form">
		<EditForm Model="@question" class="card p-4" id="form" OnValidSubmit="@Add">
			<span class="mx-auto fw-bold fs-4">Add Question</span>
			<label for="name" class="col-form-label">Question Text</label>
			<textarea class="form-control mb-3" id="name" @bind="question.QuestionText"></textarea>
			<label for="number" class="col-form-label">Question Mark</label>
			<input class="form-control mb-3" id="number" @bind-value="question.Mark"/>
			<label for="type" class="col-form-label">Question Type</label>
			<InputSelect class="form-select w-50" @bind-Value="question.QuestionSection">
				@foreach (var questionSection in questionSections)
				{
					<option value="@questionSection">@questionSection.ToString()</option>
				}
			</InputSelect>
			<label for="type" class="col-form-label">Question Section</label>
			<InputSelect class="form-select w-50" @bind-Value="question.QuestionType">
			@foreach (var questionType in questionTypes)
			{
				<option value="@questionType">@questionType.ToString()</option>
			}
			</InputSelect>

			<label for="type" class="col-form-label">Category</label>
			<InputSelect class="form-select w-50" @bind-Value="question.Category">
				@foreach (var category in categories)
				{
					<option value="@category">@category.ToString()</option>
				}
			</InputSelect>
			<label for="number" class="col-form-label">Image</label>
			<InputFile type="file" class="form-control mb-3" OnChange="LoadFile"/>
			@if(question.QuestionType == QuestionType.Multiple_Choice)
			{
				<sapn class="m-1 fw-bold ">Answers:</sapn>
				<div class="answers">
					<span>A.</span><InputText class="answer" type="text" @bind-Value="question.Answers[0].AnswerText"></InputText>
					<span>B.</span><InputText class="answer" type="text" @bind-Value="question.Answers[1].AnswerText"></InputText>
					<span>C.</span><InputText class="answer" type="text" @bind-Value="question.Answers[2].AnswerText"></InputText>
					<span>D.</span><InputText class="answer" type="text" @bind-Value="question.Answers[3].AnswerText"></InputText>

				</div>
				<div class="answers">
					<div class="mx-3"><span>A.</span><InputCheckbox type="text" @bind-Value="question.Answers[0].IsCorrect"></InputCheckbox></div>
					<div class="mx-3"><span>B.</span><InputCheckbox type="text" @bind-Value="question.Answers[1].IsCorrect"></InputCheckbox></div>
					<div class="mx-3"><span>C.</span><InputCheckbox type="text" @bind-Value="question.Answers[2].IsCorrect"></InputCheckbox></div>
					<div class="mx-3"><span>D.</span><InputCheckbox type="text" @bind-Value="question.Answers[3].IsCorrect"></InputCheckbox></div>

				</div>
			}
			
			@if (question.QuestionType == QuestionType.TrueOrFalse)
			{
				question.Answers[0].AnswerText = "True";
				question.Answers[1].AnswerText = "False";
				<sapn class="m-1 fw-bold ">Answers:</sapn>
				<div class="answers">
					<span>A.</span><InputText class="answer" type="text" @bind-Value="question.Answers[0].AnswerText"></InputText>
					<span>B.</span><InputText class="answer" type="text" @bind-Value="question.Answers[1].AnswerText"></InputText>

				</div>
				<div class="answers">
					<div class="mx-3"><span>A.</span><InputCheckbox type="text" @bind-Value="question.Answers[0].IsCorrect"></InputCheckbox></div>
					<div class="mx-3"><span>B.</span><InputCheckbox type="text" @bind-Value="question.Answers[1].IsCorrect"></InputCheckbox></div>
				</div>
			}
			<DataAnnotationsValidator />
			<ValidationSummary />
			<button type="submit" class="btn btn-primary m-2">Add</button>
		</EditForm>
	</div>
</div>
@code {
	public Question question = new Question
	{
		QuestionText = "",
		Mark = 1,
		QuestionType = QuestionType.Text,
		QuestionSection = QuestionSection.Placement_Test,
		Answers = new List<Answer>()
		{
			new Answer {AnswerKey="A" ,AnswerText="",IsCorrect=false},
			new Answer {AnswerKey="B" ,AnswerText="",IsCorrect=false},
			new Answer {AnswerKey="C" ,AnswerText="",IsCorrect=false},
			new Answer {AnswerKey="D" ,AnswerText="",IsCorrect=false},
		}
	};
	public string filePath = string.Empty;
	public IBrowserFile file;

	private List<string> questionSections = Enum.GetNames<QuestionSection>().ToList();
	private List<string> questionTypes = Enum.GetNames<QuestionType>().ToList();
	private List<string> categories = Enum.GetNames<Category>().ToList();
	private async Task Add()	
	{
		if(file != null)
		{
			var stream = file.OpenReadStream(maxAllowedSize:1024*10000);
			var buffer = new byte[file.Size];
			await stream.ReadAsync(buffer, 0, (int)file.Size);

			var content = new MultipartFormDataContent();
			content.Add(new ByteArrayContent(buffer), "file", file.Name);

			var response = await Http.PostAsync($"/api/Question/UploadImage", content);
			response.EnsureSuccessStatusCode();
			var responseContent = await response.Content.ReadAsStringAsync();
			filePath = responseContent;
		}
		question.Image = filePath;
		var respond = await Http.PostAsJsonAsync<Question>("/api/Question", question);
		var data = respond.Content.ReadAsStringAsync();
		navigationManager.NavigateTo("/admin/question");
	}
	public void LoadFile(InputFileChangeEventArgs e)
	{
		file = e.File;
		Console.WriteLine(file.Name);
	}

}
